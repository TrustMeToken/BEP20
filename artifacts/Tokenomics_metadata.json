{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"WHALE_FEE_IN_PERCENT": {
					"details": "Set the Cap balance in a wallet to identification Whale.  The default value is 75% of the maxWalletBalance.   NOTE: set the value to maxWalletBalance to disable. IMPORTANT: This value MUST be greater than `numberOfTokensToSwapToLiquidity` set below, otherwise the liquidity swap will never be executed"
				},
				"burnAddress": {
					"details": "You can change the value of the burn address to pretty much anything that's (clearly) a non-random address, i.e. for which the probability of  someone having the private key is (virtually) 0. For example, 0x00.....1,  0x111...111, 0x12345.....12345, etc. NOTE: This does NOT need to be the zero address, adress(0) = 0x000...000; Trasfering tokens to the burn address is good for optics/marketing. Nevertheless if the burn address is excluded from rewards (unlike in Safemoon), sending tokens to the burn address actually improves redistribution to holders (as they will have a larger % of tokens in non-excluded accounts) p.s. the address below is the speed of light in vacuum in m/s (expressed in decimals), the hex value is 0x0000000000000000000000000000000011dE784A; :) Here are the values of some other fundamental constants to use: 0x0000000000000000000000000000000602214076 (Avogardo constant) 0x0000000000000000000000000000000001380649 (Boltzmann constant) 0x2718281828459045235360287471352662497757 (e) 0x0000000000000000000000000000001602176634 (elementary charge) 0x0000000000000000000000000200231930436256 (electron g-factor) 0x0000000000000000000000000000091093837015 (electron mass) 0x0000000000000000000000000000137035999084 (fine structure constant) 0x0577215664901532860606512090082402431042 (Euler-Mascheroni constant) 0x1618033988749894848204586834365638117720 (golden ratio) 0x0000000000000000000000000000009192631770 (hyperfine transition fq) 0x0000000000000000000000000000010011659208 (muom g-2) 0x3141592653589793238462643383279502884197 (pi) 0x0000000000000000000000000000000662607015 (Planck's constant) 0x0000000000000000000000000000001054571817 (reduced Planck's constant) 0x1414213562373095048801688724209698078569 (sqrt(2))"
				},
				"maxTransactionAmount": {
					"details": "Set the maximum transaction amount allowed in a transfer.  The default value is 1% of the total supply.   NOTE: set the value to `TOTAL_SUPPLY` to have an unlimited max, i.e. `maxTransactionAmount = TOTAL_SUPPLY;`"
				},
				"maxWalletBalance": {
					"details": "Set the maximum allowed balance in a wallet.  The default value is 2% of the total supply.   NOTE: set the value to 0 to have an unlimited max. IMPORTANT: This value MUST be greater than `numberOfTokensToSwapToLiquidity` set below, otherwise the liquidity swap will never be executed"
				},
				"numberOfTokensToSwapToLiquidity": {
					"details": "Set the number of tokens to swap and add to liquidity.   Whenever the contract's balance reaches this number of tokens, swap & liquify will be  executed in the very next transfer (via the `_beforeTokenTransfer`)  If the `FeeType.Liquidity` is enabled in `FeesSettings`, the given % of each transaction will be first sent to the contract address. Once the contract's balance reaches `numberOfTokensToSwapToLiquidity` the `swapAndLiquify` of `Liquifier` will be executed. Half of the tokens will be swapped for ETH  (or BNB on BSC) and together with the other half converted into a Token-ETH/Token-BNB LP Token.  See: `Liquifier`"
				},
				"tipToTheDev": {
					"details": "You can disable this but if you feel generous I'd appreciate the 0.1% donation for rewriting Safemoon and making everyone's life a little easier If you keep this tip enabled, let me know in Discord: https://discord.gg/zn86MDCQcM and you'll be added to the partners section to promote your token. "
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"TrustMe.sol": "Tokenomics"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"TrustMe.sol": {
			"keccak256": "0xa14367de8bfc3b05bf784825ed0b021174c186d75847fb84d47231b3649b3d03",
			"license": "MIT",
			"urls": [
				"bzz-raw://50b0aa0f05eb064cfab9962c7d6cd6169d88430464e1a8e1c6d0a89e98f3f730",
				"dweb:/ipfs/Qmat8PfNDwXiPXFVw5uECma4WnFqoB2k1SyBvihFKo3YXd"
			]
		}
	},
	"version": 1
}